package main

//给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
//
//子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。
//
//示例 1：
//
//输入：nums = [10,9,2,5,3,7,101,18]
//输出：4
//解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。
//示例 2：
//
//输入：nums = [0,1,0,3,2,3]
//输出：4
//示例 3：
//
//输入：nums = [7,7,7,7,7,7,7]
//输出：1

func lengthOfLIS(nums []int) int {
	//dp[i]为以i为结尾的最长递增子序列的长度
	dp := make([]int, len(nums))
	dp[0] = 1
	// 初始化，所有的元素都应该初始化为1
	for i := range dp {
		dp[i] = 1
	}
	ans := 0
	for i := 1; i < len(nums); i++ { //指定尾部数字
		for j := 0; j < i; j++ { //从0开始遍历到尾部， 判断以上一个尾部元素和本数字比较
			if nums[i] > nums[j] {
				dp[i] = max(dp[i], dp[j]+1)
			}
		}

		if dp[i] > ans {
			ans = dp[i]
		}
	}
	return ans
}
